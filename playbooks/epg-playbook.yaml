---
- name: ACI ansible operator EPG Playbook
  connection: local
  hosts: localhost
  vars:
    jsonVar: "{{ lookup('file', '/opt/ansible/aci-containers-config/controller-config') | from_json }}"
    prefix: "{{ jsonVar['aci-prefix'] }}"
    user: "{{ jsonVar['apic-username'] }}"
    tenant: "{{ jsonVar['aci-policy-tenant'] }}"
    certKey: "{{ jsonVar['apic-private-key-path'] }}"
    certName: '{{ user }}.crt'
    vmProvider: "{{ jsonVar['aci-vmm-type'] | lower }}"
    vmmDomain: "{{ jsonVar['aci-vmm-domain'] }}"
    ap: 'aci-containers-{{ prefix }}'
    bd: 'aci-containers-{{ prefix }}-pod-bd'
    apicHosts: "{{ jsonVar['apic-hosts'] }}"
    apicHost: "{{ apicHosts | random }}"
    epgName: '{{ ansible_operator_meta.name }}'
    masterEpgs: '{{ epg_contract_masters }}'
    providedContracts: '{{ provided_contracts }}'
    consumedContracts: '{{ consumed_contracts }}'
    desiredState: '{{ state }}'
    annotation: 'orchestrator:aci-ansible-operator'
    epgPath: 'uni/tn-{{ tenant }}/ap-{{ ap }}/epg-{{ epgName }}'
  tasks:
  - name: Create/Delete the EPG
    cisco.aci.aci_epg:
      host: '{{ apicHost }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      username: '{{ user }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      bd: '{{ bd }}'
      annotation: '{{ annotation }}'
      use_ssl: yes
      validate_certs: no
      use_proxy: no
      state: '{{ desiredState }}'
  - name: Query all the provided contracts to EPG
    when: desiredState == 'present'
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract:
      host: '{{ apicHost }}'
      username: '{{ user }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract_type: provider
      state: query
      output_level: info
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    register: query_result
  - debug:
      msg: 'Provider contract name {{ item.fvRsProv.attributes.tnVzBrCPName }}'
    with_items: '{{ query_result.current[0].fvAEPg.children }}'
    when: (desiredState == 'present') and (query_result.current[0].fvAEPg.children is defined)
  - name: Query each provided contract to get its annotation
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract:
      host: '{{ apicHost }}'
      username: '{{ user }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract: '{{ item.fvRsProv.attributes.tnVzBrCPName }}'
      contract_type: provider
      use_ssl: yes
      validate_certs: no
      use_proxy: no
      state: query
    with_items: "{{ query_result.current[0].fvAEPg.children }}"
    when: (desiredState == 'present') and (query_result.current[0].fvAEPg.children is defined)
    register: contract_query_result
  - name: Set the provided contract list
    when: desiredState == 'present'
    set_fact:
      providedContractList: '{{ providedContracts }}'
  - name: Add the provided contracts not owned by us to the list
    set_fact:
      providedContractList: "{{ providedContractList + [item.item.fvRsProv.attributes.tnVzBrCPName] }}"
    with_items: "{{ contract_query_result.results }}"
    when: (desiredState == 'present') and (contract_query_result.results is defined) and (item.item.fvRsProv.attributes.annotation != annotation)
  - name: Delete the extra provided contracts to EPG
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract:
      host: '{{ apicHost }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      username: '{{ user }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract_type: provider
      contract: '{{ item.fvRsProv.attributes.tnVzBrCPName }}'
      state: absent
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_items: '{{ query_result.current[0].fvAEPg.children }}'
    when: (desiredState == 'present') and (query_result.current[0].fvAEPg.children is defined) and (item.fvRsProv.attributes.tnVzBrCPName not in providedContractList)
  - name: Add provided contracts to EPG
    when: desiredState == 'present'
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract:
      host: '{{ apicHost }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      username: '{{ user }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract: '{{ item }}'
      contract_type: provider
      annotation: '{{ annotation }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ providedContracts }}'
  - name: Query all the consumed contracts to EPG
    when: desiredState == 'present'
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract:
      host: '{{ apicHost }}'
      username: '{{ user }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract_type: consumer
      state: query
      output_level: info
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    register: query_result
  - debug:
      msg: 'Consumer contract name {{ item.fvRsCons.attributes.tnVzBrCPName }}'
    with_items: '{{ query_result.current[0].fvAEPg.children }}'
    when: (desiredState == 'present') and (query_result.current[0].fvAEPg.children is defined)
  - name: Query each consumed contract to get its annotation
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract:
      host: '{{ apicHost }}'
      username: '{{ user }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract: '{{ item.fvRsCons.attributes.tnVzBrCPName }}'
      contract_type: consumer
      use_ssl: yes
      validate_certs: no
      use_proxy: no
      state: query
    with_items: "{{ query_result.current[0].fvAEPg.children }}"
    when: (desiredState == 'present') and (query_result.current[0].fvAEPg.children is defined)
    register: contract_query_result
  - name: Set the consumed contract list
    when: desiredState == 'present'
    set_fact:
      consumedContractList: '{{ consumedContracts }}'
  - name: Add the consumed contracts not owned by us to the list
    set_fact:
      consumedContractList: "{{ consumedContractList + [item.item.fvRsCons.attributes.tnVzBrCPName] }}"
    with_items: "{{ contract_query_result.results }}"
    when: (desiredState == 'present') and (contract_query_result.results is defined) and (item.item.fvRsCons.attributes.annotation != annotation)
  - name: Delete the extra consumed contracts to EPG
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract:
      host: '{{ apicHost }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      username: '{{ user }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract: '{{ item.fvRsCons.attributes.tnVzBrCPName }}'
      contract_type: consumer
      state: absent
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_items: '{{ query_result.current[0].fvAEPg.children }}'
    when: (desiredState == 'present') and (query_result.current[0].fvAEPg.children is defined) and (item.fvRsCons.attributes.tnVzBrCPName not in consumedContractList)
  - name: Add consumed contracts to EPG
    when: desiredState == 'present'
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract:
      host: '{{ apicHost }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      username: '{{ user }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract: '{{ item }}'
      contract_type: consumer
      annotation: '{{ annotation }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ consumedContracts }}'
  - name: Query Master EPGs
    when: desiredState == 'present'
    ignore_errors: yes
    cisco.aci.aci_rest:
      host: '{{ apicHost }}'
      username: '{{ user }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      method: get
      use_ssl: yes
      validate_certs: no
      path: /api/node/class/fvRsSecInherited.json
    register: query_result
  - debug:
      msg: '{{ item.fvRsSecInherited.attributes.tDn.split("/")[-1][4:] }}'
    with_items: '{{ query_result.imdata }}'
    when: (desiredState == 'present') and (query_result.imdata is defined)
  - name: Query each master EPG to get its annotation
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract_master:
      host: '{{ apicHost }}'
      username: '{{ user }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract_master_ap: '{{ ap }}'
      contract_master_epg: '{{ item.fvRsSecInherited.attributes.tDn.split("/")[-1][4:] }}'
      use_ssl: yes
      validate_certs: no
      use_proxy: no
      state: query
    with_items: "{{ query_result.imdata }}"
    when: (desiredState == 'present') and (query_result.imdata is defined) and (epgPath in item.fvRsSecInherited.attributes.dn)
    register: master_query_result
  - name: Set the master EPG list
    when: desiredState == 'present'
    set_fact:
      masterEpgList: '{{ masterEpgs }}'
  - name: Add the master EPGs not owned by us to the list
    set_fact:
      masterEpgList: "{{ masterEpgList + [item.item.fvRsSecInherited.attributes.tDn.split('/')[-1][4:]] }}"
    with_items: "{{ master_query_result.results }}"
    when: (desiredState == 'present') and (master_query_result.results is defined) and (epgPath in item.item.fvRsSecInherited.attributes.dn) and (item.item.fvRsSecInherited.attributes.annotation != annotation)
  - name: Delete extra Master EPGs
    ignore_errors: yes
    cisco.aci.aci_epg_to_contract_master:
      host: '{{ apicHost }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      username: '{{ user }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract_master_ap: '{{ ap }}'
      contract_master_epg: '{{ item.fvRsSecInherited.attributes.tDn.split("/")[-1][4:] }}'
      state: absent
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_items: '{{ query_result.imdata }}'
    when: (desiredState == 'present') and (query_result.imdata is defined) and (epgPath in item.fvRsSecInherited.attributes.dn) and (item.fvRsSecInherited.attributes.tDn.split("/")[-1][4:] not in masterEpgList)
  - name: Attach Master EPGs
    when: (desiredState == 'present')
    cisco.aci.aci_epg_to_contract_master:
      host: '{{ apicHost }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      username: '{{ user }}'
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      contract_master_ap: '{{ ap }}'
      contract_master_epg: '{{ item }}'
      annotation: '{{ annotation }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ masterEpgs }}'
  - name: Bind EPG to VMM Domain
    when: desiredState == 'present'
    cisco.aci.aci_epg_to_domain:
      host: '{{ apicHost }}'
      cert_key: '{{ certKey }}'
      certificate_name: '{{ certName }}'
      username: '{{ user }}'
      vm_provider: '{{ vmProvider }}'
      domain: '{{ vmmDomain }}'
      domain_type: vmm
      tenant: '{{ tenant }}'
      ap: '{{ ap }}'
      epg: '{{ epgName }}'
      annotation: '{{ annotation }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
